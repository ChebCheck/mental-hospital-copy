name: Build and SonarCloud Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
 NUGET_PACKAGES_DIRECTORY: ".nuget"
 PATH_TO_SLN: "./MentalHospital.sln"
 GIT_DEPTH: '0'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Set up JDK 
      uses: actions/setup-java@v3
      with:
       distribution: 'temurin'
       java-version: '19'

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
  
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Restore dependencies
      run: dotnet restore $PATH_TO_SLN --packages $NUGET_PACKAGES_DIRECTORY -f

    - name: Build and analyze
      env:
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        PROJECT_KEY: ${{ vars.PROJECT_KEY }}
        ORGANIZATION: ${{ vars.ORGANIZATION }}
        EXCLUDE_FROM_COVERAGE: ${{ vars.EXCLUDE_FROM_COVERAGE }}
      run: |
          dotnet tool restore
          dotnet-sonarscanner begin /k:"$PROJECT_KEY" /o:"$ORGANIZATION" /d:sonar.token="$SONAR_TOKEN" /d:sonar.host.url="$SONAR_HOST_URL" /d:sonar.coverage.exclusions="$EXCLUDE_FROM_COVERAGE" /d:sonar.cs.opencover.reportsPaths=dotCover.Output.html
          dotnet build --configuration Release ${{ env.PATH_TO_SLN }}
          dotnet test ${{ env.PATH_TO_SLN }} --no-restore --no-build --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
